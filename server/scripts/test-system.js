const http = require('http');
const WebSocket = require('ws');

const SERVER_URL = 'http://localhost:5000';
const WS_URL = 'ws://localhost:5000';

console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ Biolab Logistik Planner\n');
console.log('='.repeat(50));

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞
function testHTTPServer() {
  return new Promise((resolve, reject) => {
    console.log('\nüì° –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞...');

    http.get(`${SERVER_URL}/api/health`, (res) => {
      let data = '';

      res.on('data', (chunk) => {
        data += chunk;
      });

      res.on('end', () => {
        if (res.statusCode === 200) {
          console.log('‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î');
          console.log(`   Status: ${res.statusCode}`);
          resolve();
        } else {
          console.log('‚ùå HTTP —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É');
          reject(new Error(`Status: ${res.statusCode}`));
        }
      });
    }).on('error', (err) => {
      console.log('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ HTTP —Å–µ—Ä–≤–µ—Ä–∞');
      console.log(`   –ü–æ–º–∏–ª–∫–∞: ${err.message}`);
      reject(err);
    });
  });
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
function testWebSocketServer() {
  return new Promise((resolve, reject) => {
    console.log('\nüîå –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞...');

    const ws = new WebSocket(WS_URL);
    let timeout;

    ws.on('open', () => {
      console.log('‚úÖ WebSocket –∑\'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      clearTimeout(timeout);
      ws.close();
      resolve();
    });

    ws.on('error', (err) => {
      console.log('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ WebSocket —Å–µ—Ä–≤–µ—Ä–∞');
      console.log(`   –ü–æ–º–∏–ª–∫–∞: ${err.message}`);
      clearTimeout(timeout);
      reject(err);
    });

    // –¢–∞–π–º–∞—É—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    timeout = setTimeout(() => {
      console.log('‚ùå –¢–∞–π–º–∞—É—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WebSocket');
      ws.close();
      reject(new Error('Connection timeout'));
    }, 5000);
  });
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
function testDatabase() {
  return new Promise((resolve, reject) => {
    console.log('\nüíæ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...');

    const sqlite3 = require('sqlite3').verbose();
    const path = require('path');

    const dbPath = path.join(__dirname, '..', '..', 'data', 'biolab.db');
    const db = new sqlite3.Database(dbPath, (err) => {
      if (err) {
        console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö');
        console.log(`   –ü–æ–º–∏–ª–∫–∞: ${err.message}`);
        reject(err);
      } else {
        console.log('‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–µ');

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—å
        db.all(`SELECT name FROM sqlite_master WHERE type='table'`, (err, tables) => {
          if (err) {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç–∞–±–ª–∏—Ü—å');
            reject(err);
          } else {
            console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${tables.length} —Ç–∞–±–ª–∏—Ü—å:`);
            tables.forEach(table => {
              console.log(`   - ${table.name}`);
            });
            db.close();
            resolve();
          }
        });
      }
    });
  });
}

// –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤
async function runTests() {
  try {
    await testDatabase();

    console.log('\n‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä—ñ–≤...');
    console.log('   –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –∫–æ–º–∞–Ω–¥–æ—é: npm run dev\n');

    // –ü–∞—É–∑–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞
    await new Promise(resolve => setTimeout(resolve, 2000));

    await testHTTPServer();
    await testWebSocketServer();

    console.log('\n' + '='.repeat(50));
    console.log('‚ú® –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
    console.log('='.repeat(50) + '\n');

    console.log('üìã –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:');
    console.log('   1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –∫–ª—ñ—î–Ω—Ç: cd client && npm start');
    console.log('   2. –í—ñ–¥–∫—Ä–∏–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:3000');
    console.log('   3. –£–≤—ñ–π–¥—ñ—Ç—å –∑ –æ–±–ª—ñ–∫–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏ admin');
    console.log('\n');

  } catch (error) {
    console.log('\n' + '='.repeat(50));
    console.log('‚ùå –¢–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ');
    console.log('='.repeat(50) + '\n');
    console.log('üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ:');
    console.log('   - –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ: cd server && npm run dev');
    console.log('   - –ü–æ—Ä—Ç 5000 –≤—ñ–ª—å–Ω–∏–π');
    console.log('   - –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ—Å–Ω—É—î');
    console.log('\n');
    process.exit(1);
  }
}

runTests();
